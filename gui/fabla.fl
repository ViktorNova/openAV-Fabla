# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
class FablaUI {open
} {
  Function {FablaUI()} {open
  } {
    code {setupUI();
w->show();} {}
  }
  Function {FablaUI(void* xParentWindow, Fabla* f)} {open
  } {
    code {setupUI();

fabla = f;

// embed drawn stuff into LV2 host provided area  
fl_embed( w, (Window)xParentWindow );} {}
  }
  Function {setupUI()} {open
  } {
    code {// In case FLTK hasn't set up yet
fl_open_display();

selectedPad = 0;} {}
    Fl_Window w {
      label Fabla open
      xywh {638 28 515 490} type Double color 56 selection_color 0 labelcolor 88
      code0 {\#include "avtk.h"}
      code1 {using namespace Avtk;}
      code2 {\#include <FL/x.H>}
      code3 {\#include "lv2/lv2plug.in/ns/lv2core/lv2.h"} visible
    } {
      Fl_Box {} {
        label Source
        xywh {346 41 159 215} box UP_BOX
        class Background
      }
      Fl_Box adsr {
        xywh {351 66 150 84} box UP_BOX
        class ADSR
      }
      Fl_Box {} {
        label Master
        xywh {346 265 159 215} box UP_BOX
        class Background
      }
      Fl_Box compressor {
        label Compressor
        xywh {352 290 97 84} box UP_BOX
        class Compressor
      }
      Fl_Box {} {
        xywh {351 379 97 97} box BORDER_BOX
      }
      Fl_Box masterVol {
        label Vol
        xywh {453 290 48 186} box UP_BOX
        code0 {\#include "../dsp/ports.h"}
        code1 {\#include "lv2/lv2plug.in/ns/extensions/ui/ui.h"}
        code2 {\#include "../dsp/shared.h"}
        code3 {\#include "fabla.hxx"}
        class Volume
      }
      Fl_Box {} {
        xywh {350 155 150 98} box BORDER_BOX
      }
      Fl_Box {} {
        label Rel
        xywh {406 435 30 30} box UP_BOX color 48 labelcolor 32
        class Dial
      }
      Fl_Box {} {
        label Waveform
        xywh {9 41 330 132} box UP_BOX
        class Background
      }
      Fl_Box {} {
        label {Amp Adsr}
        xywh {9 180 330 300} box UP_BOX
        class Background
      }
      Fl_Box freqLfo {
        xywh {11 64 324 107} box UP_BOX
        class Waveform
      }
      Fl_Box image {
        label {header image}
        xywh {0 0 515 36} box UP_BOX
        code0 {\#include "header.c"}
        code1 {image->setPixbuf(header.pixel_data,4);}
        class Image
      }
      Fl_Box p13 {
        label 13
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {15 205 75 64} box BORDER_BOX labelcolor 52
        code0 {p13->ID(12);}
        class Pad
      }
      Fl_Box p14 {
        label 14
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {97 205 75 64} box BORDER_BOX labelcolor 52
        code0 {p14->ID(13);}
        class Pad
      }
      Fl_Box p15 {
        label 15
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {178 205 75 64} box BORDER_BOX labelcolor 52
        code0 {p15->ID(14);}
        class Pad
      }
      Fl_Box p16 {
        label 16
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {259 205 75 64} box BORDER_BOX labelcolor 52
        code0 {p16->ID(15);}
        class Pad
      }
      Fl_Box p9 {
        label 9
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {15 273 75 64} box BORDER_BOX labelcolor 52
        code0 {p9->ID(8);}
        class Pad
      }
      Fl_Box p5 {
        label 5
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {15 341 75 64} box BORDER_BOX labelcolor 52
        code0 {p5->ID(4);}
        class Pad
      }
      Fl_Box p1 {
        label 1
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {15 411 75 64} box BORDER_BOX labelcolor 52
        code0 {p1->selected(true);}
        code1 {p1->ID(0);}
        code2 {\#include <FL/Fl_Native_File_Chooser.H>}
        class Pad
      }
      Fl_Box p10 {
        label 10
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {97 273 75 64} box BORDER_BOX labelcolor 52
        code0 {p10->ID(9);}
        class Pad
      }
      Fl_Box p6 {
        label 6
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {97 341 75 64} box BORDER_BOX labelcolor 52
        code0 {p6->ID(5);}
        class Pad
      }
      Fl_Box p2 {
        label 2
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {97 411 75 64} box BORDER_BOX labelcolor 52
        code0 {p2->ID(1);}
        class Pad
      }
      Fl_Box p11 {
        label 11
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {178 273 75 64} box BORDER_BOX labelcolor 52
        code0 {p11->ID(10);}
        class Pad
      }
      Fl_Box p7 {
        label 7
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {178 341 75 64} box BORDER_BOX labelcolor 52
        code0 {p7->ID(6);}
        class Pad
      }
      Fl_Box p3 {
        label 3
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {178 411 75 64} box BORDER_BOX labelcolor 52
        code0 {p3->ID(2);}
        class Pad
      }
      Fl_Box p12 {
        label 12
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {259 273 75 64} box BORDER_BOX labelcolor 52
        code0 {p12->ID(11);}
        class Pad
      }
      Fl_Box p8 {
        label 8
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {259 341 75 64} box BORDER_BOX labelcolor 52
        code0 {p8->ID(7);}
        class Pad
      }
      Fl_Box p4 {
        label 4
        callback {pad_click( o->ID(), o->mouseRightClicked );}
        xywh {259 411 75 64} box BORDER_BOX labelcolor 52
        code0 {p4->ID(3);}
        class Pad
      }
      Fl_Box {} {
        label Atk
        xywh {365 435 30 30} box UP_BOX color 48 labelcolor 32
        class Dial
      }
      Fl_Box {} {
        label Thres
        callback {compressor->threshold( o->value() );}
        xywh {406 395 30 30} box UP_BOX color 48 labelcolor 32
        class Dial
      }
      Fl_Box {} {
        label Ratio
        callback {compressor->ratio( o->value() );}
        xywh {365 395 30 30} box UP_BOX color 48 labelcolor 32
        class Dial
      }
      Fl_Box gain {
        label Gain
        callback {float tmp = o->value();
int port = int(PAD_GAIN) + selectedPad;
writeFunction(controller, port, sizeof(float), 0, (const void*) &tmp);
printf("gain on pad\# %i, port\# %i, value %f\\n", selectedPad, port, tmp);} selected
        xywh {374 210 42 40} box UP_BOX color 48 labelcolor 40
        code0 {gain->drawLabel(true);}
        class Dial
      }
      Fl_Box d {
        label D
        callback {adsr->decay( o->value() );}
        xywh {393 170 30 30} box UP_BOX color 48 labelcolor 40
        class Dial
      }
      Fl_Box a {
        label A
        callback {adsr->attack( o->value() );}
        xywh {358 170 30 30} box UP_BOX color 48 labelcolor 40
        class Dial
      }
      Fl_Box pitch {
        label Pitch
        xywh {425 210 45 40} box UP_BOX color 48 labelcolor 40
        code0 {pitch->drawLabel(true);}
        class Dial
      }
      Fl_Box r {
        label R
        callback {adsr->release( o->value() );}
        xywh {463 170 30 30} box UP_BOX color 48 labelcolor 40
        class Dial
      }
      Fl_Box s {
        label S
        callback {adsr->sustain( o->value() );}
        xywh {428 170 30 30} box UP_BOX color 48 labelcolor 40
        code0 {extern void writeLoadSample(Fabla* self, int pad, const char* filename, size_t filename_len);}
        code1 {extern void writePadPlay(Fabla* self, int pad );}
        class Dial
      }
    }
  }
  decl {Fabla* fabla;} {public local
  }
  Function {idle()} {open
  } {
    code {// takes care of handling events
Fl::check();
Fl::flush();} {}
  }
  Function {select_pad(int p)} {open
  } {
    code {switch(selectedPad + 1)
{
  case 1:  p1->selected(false);  break;
  case 2:  p2->selected(false);  break;
  case 3:  p3->selected(false);  break;
  case 4:  p4->selected(false);  break;
  case 5:  p5->selected(false);  break;
  case 6:  p6->selected(false);  break;
  case 7:  p7->selected(false);  break;
  case 8:  p8->selected(false);  break;
  case 9:  p9->selected(false);  break;
  case 10: p10->selected(false); break;
  case 11: p11->selected(false); break;
  case 12: p12->selected(false); break;
  case 13: p13->selected(false); break;
  case 14: p14->selected(false); break;
  case 15: p15->selected(false); break;
  case 16: p16->selected(false); break;
  default: printf("unknown pad");
}

selectedPad = p;
switch(selectedPad+1)
{
  case 1:  p1->selected(true);  break;
  case 2:  p2->selected(true);  break;
  case 3:  p3->selected(true);  break;
  case 4:  p4->selected(true);  break;
  case 5:  p5->selected(true);  break;
  case 6:  p6->selected(true);  break;
  case 7:  p7->selected(true);  break;
  case 8:  p8->selected(true);  break;
  case 9:  p9->selected(true);  break;
  case 10: p10->selected(true); break;
  case 11: p11->selected(true); break;
  case 12: p12->selected(true); break;
  case 13: p13->selected(true); break;
  case 14: p14->selected(true); break;
  case 15: p15->selected(true); break;
  case 16: p16->selected(true); break;
  default: printf("unknown pad");
}} {}
  }
  decl {int selectedPad;} {private local
  }
  Function {pad_click(int id, int rclick)} {open
  } {
    code {printf("pad %i clicked, right = %i\\n", id, rclick);

if ( rclick )
{
  // pop up "load sample" dialog, write Atom event to DSP
  
  Fl_Native_File_Chooser fnfc;
  fnfc.title("Load Sample");
  fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
  fnfc.filter("Wav\\t*.wav");
  fnfc.directory( getenv("HOME") );
  
  switch ( fnfc.show() )
  {
    case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
    case  1: printf("CANCEL\\n");                      break;  // CANCEL
    default: printf("Loading directory: %s\\n", fnfc.filename());    
    
    writeLoadSample(fabla, id, fnfc.filename(), strlen(fnfc.filename()));
    break;
 }
}
else
{
  // write pad play Atom to DSP
  writePadPlay( fabla, id );
  
  // update the UI showing the ADSR / waveform of this pad
  select_pad( id );
}} {}
  }
  decl {LV2UI_Controller controller;} {public local
  }
  decl {LV2UI_Write_Function writeFunction} {public local
  }
} 
